AWSTemplateFormatVersion: "2010-09-09"
Description: "CI/CD elements for automate K8 creation"

Parameters:
  S3BucketName:
    Type: String
    Default: "iaac-s3"
    Description: Put the name of S3

Resources:
  S3BUCKET:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Put the name of the Git2S3 bucket with IaaC
      Name: S3BUCKET
      Type: "String"
      Value: !Ref S3BucketName

  STAGE:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Put the name of the Git2S3 bucket with IaaC
      Name: STAGE
      Type: "String"
      Value: unit_tests

  COVBUILD:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Name of the CF covqstack Build
      Name: COVBUILD
      Type: "String"
      Value: CovqRunCPG

  COVPROJECT:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Name of the covqrun CodeBuild project
      Name: COVPROJECT
      Type: "String"
      Value: !Sub CfCovqRunCPG-${AWS::StackName}

  USER:
    Type: AWS::SSM::Parameter
    Properties:
      Description: User for Docker images
      Name: USER
      Type: "String"
      Value: techuser

  IMAGE:
    Type: AWS::SSM::Parameter
    Properties:
      Name: IMAGE
      Type: String
      Value: "covqspeccpg"
      Description: Image for docker build

  TZ:
    Type: AWS::SSM::Parameter
    Properties:
      Name: TZ
      Type: String
      Value: "Europe/Berlin"
      Description: TimeZone for docker images

  ECRURL:
    Type: AWS::SSM::Parameter
    Properties:
      Name: ECRURL
      Type: String
      Value: !Sub "${AWS::AccountId}.dkr.ecr.eu-central-1.amazonaws.com"
      Description: Url to the AWS/ECR repository

  ECR:
    Type: AWS::SSM::Parameter
    Properties:
      Name: ECR
      Type: String
      Value: "devopsrepo"
      Description: Name of the ECR repository

  ECRRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "devopsrepo"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:role/${ECSRole}
            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:PutImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"
  ECSRole:
    Type: AWS::IAM::Role
    Description: Creating service role in IAM for AWS ECR
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"

  CovSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub "${AWS::StackName}-codebuild"
      GroupDescription: Security group for the CICD Process
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "tcp"
          FromPort: "0"
          ToPort: "65535"
      VpcId: !Ref VpcName

  CodeBuildPolicy:
    Type: AWS::IAM::Policy
    Description: Setting IAM policy for service role for CodeBuild
    Properties:
      PolicyName: !Join
        - "-"
        - - !Ref "AWS::StackName"
          - CodeBuildPolicy
      Roles:
        - !Ref "CodeBuildRole"
      PolicyDocument:
        Statement:
          - Action:
              - codebuild:UpdateProject
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:GetLogEvents
            Effect: Allow
            Resource: "*"
          - Action:
              - ssm:GetSecretValue
              - ssm:GetParameters
              - ssm:GetParameter
            Resource: "*"
            Effect: Allow
          - Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeDhcpOptions
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              - ec2:DescribeSubnets
              - ec2:DescribeSecurityGroups
              - ec2:DescribeSecurityGroupRules
              - ec2:CreateSecurityGroup
              - ec2:DescribeVpcs
              - ec2:CreateNetworkInterfacePermission
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
              - s3:GetBucketAcl
              - s3:GetBucketLocation
            Effect: Allow
            Resource: "*"
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:PutImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
            Effect: Allow
            Resource: "*"
          - Action:
              - codebuild:StartBuild
              - codebuild:StopBuild
              - codebuild:RetryBuild
            Effect: Allow
            Resource: "*"
          - Action:
              - secretsmanager:*
            Effect: Allow
            Resource: "*"

  #execution role for codebuild
  CodeBuildRole:
    Description: Creating service role in IAM for AWS CodeBuild
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
      Path: /service-role/
      RoleName: !Join
        - "-"
        - - !Ref "AWS::StackName"
          - CodeBuild
    Type: AWS::IAM::Role

  CfBuildDockerCPG:
    DependsOn:
      - CodeBuildPolicy
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub CfBuildDockerCPG-${AWS::StackName}
      Description: Build specific docker image and push it to ECR
      ServiceRole:
        Fn::GetAtt:
          - CodeBuildRole
          - Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        PrivilegedMode: true
        Image: "aws/codebuild/standard:5.0"
        Type: LINUX_CONTAINER
      QueuedTimeoutInMinutes: 60
      Source:
        Type: S3
        Location: !Join
          - "/"
          - - !Ref S3BucketName
            - !Ref Projectname
            - !Ref Reponame
            - !Ref Branch
            - !Sub "${Projectname}_devops-cpg.zip"
        #!Sub "${S3BucketName}/drd-computational-chemistry/devops-cpg/devopscpg/drd-computational-chemistry_devops-cpg.zip"
        BuildSpec: build/buildspec.yml
      VpcConfig:
        VpcId: !Ref VpcName
        SecurityGroupIds:
          - !Ref CovSecurityGroup
        Subnets:
          - !Ref SubName
          #- !Sub "cov-network-${VpcName}-${CodeBuildSubnetType}-subnet-c" sharedvpccpg-intranet-b
      Triggers:
        Webhook: false
  #execution role for codebuild CovqRun
  CfCovqRunCPG:
    DependsOn:
      - CodeBuildPolicy
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub CfCovqRunCPG-${AWS::StackName}
      Description: Build CfCovqRunCPG Project
      ServiceRole:
        Fn::GetAtt:
          - CodeBuildRole
          - Arn
      Environment:
        Image: temp #612329472750.dkr.ecr.eu-central-1.amazonaws.com/devops-cpg:unit_tests-20211207T095712 #no image on new instance
        ComputeType: "BUILD_GENERAL1_SMALL"
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        ImagePullCredentialsType: SERVICE_ROLE
      Source:
        Type: S3
        Location: !Join
          - "/"
          - - !Ref S3BucketName
            - !Ref Projectname
            - !Ref Reponame
            - !Ref Branch
            - !Sub "${Projectname}_devops-cpg.zip"
        BuildSpec: covq/covqspec.yml
      VpcConfig:
        VpcId: !Ref VpcName
        SecurityGroupIds:
          - !Ref CovSecurityGroup
        Subnets:
          - !Ref SubName
        #- !Sub "cov-network-${VpcName}-${CodeBuildSubnetType}-subnet-c" sharedvpccpg-intranet-b
      Artifacts:
        Type: NO_ARTIFACTS
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
        S3Logs:
          Status: DISABLED
          EncryptionDisabled: false
  #CodePipeline
  CodePipelinePolicy:
    Type: AWS::IAM::Policy
    Description: Setting IAM policy for service role for
    Properties:
      PolicyName: !Join
        - "-"
        - - !Ref "AWS::StackName"
          - CodePipelinePolicy
      Roles:
        - !Ref "CodePipelineRole"
      PolicyDocument:
        Statement:
          - Action:
              - codebuild:UpdateProject
              - Codebuild:*
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:GetLogEvents
            Effect: Allow
            Resource: "*"
          - Action:
              - ssm:GetSecretValue
              - ssm:GetParameters
              - ssm:GetParameter
            Resource: "*"
            Effect: Allow
          - Action:
              - codepipeline:GetPipelineExecution
              - codepipeline:GetPipeline
              - codepipeline:StartPipelineExecution
              - codepipeline:*
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
              - s3:GetBucketAcl
              - s3:GetBucketLocation
              - s3:*
            Effect: Allow
            Resource: "*"
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:PutImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
              - iam:PassRole
            Effect: Allow
            Resource: "*"
          - Action:
              - codebuild:StartBuild
              - codebuild:StopBuild
              - codebuild:RetryBuild
            Effect: Allow
            Resource: "*"
          - Action:
              - secretsmanager:*
            Effect: Allow
            Resource: "*"
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub CodePipelineRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /service-role/

  #  ArtifactStore:
  #    Type: AWS::S3::Bucket
  #    DeletionPolicy: Delete
  #    Properties:
  #      BucketName: cov-devops-cfartifact
  #      VersioningConfiguration:
  #        Status: Enabled

  CFPipelineCPG:
    DependsOn:
      - CodePipelinePolicy
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub CFPipelineCPG-${AWS::StackName}
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStoreBucket
      Stages:
        - Name: Source
          Actions:
            - Name: CFSourceRepo
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: "1"
              Configuration:
                S3Bucket: !Ref S3BucketName
                S3ObjectKey: !Join
                  - "/"
                  - - !Ref Projectname
                    - !Ref Reponame
                    - !Ref Branch
                    - !Sub "${Projectname}_devops-cpg.zip"
                PollForSourceChanges: true
              OutputArtifacts:
                - Name: CFSourceRepo
              RunOrder: 1
            - Name: CFSourceFile
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: "1"
              Configuration:
                S3Bucket: !Ref S3BucketName
                S3ObjectKey: MergeRequestLogs/MergeLogs.zip
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              InputArtifacts:
                - Name: CFSourceRepo
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              OutputArtifacts:
                - Name: MyBuildArtifact
              Configuration:
                ProjectName: !Ref CfCovqRunCPG
              RunOrder: 1

    #SNS Pipeline Notification
  NotifyTriggerSNS:
    Type: "AWS::CodeStarNotifications::NotificationRule"
    Properties:
      Name: "My Notification Rule for Lambda GitToS3"
      DetailType: FULL
      Resource: "arn:aws:codepipeline:eu-central-1:612329472750:CFPipelineCPG-${AWS::StackName}"
      EventTypeIds:
        - codepipeline-pipeline-action-execution-succeeded
        - codepipeline-pipeline-action-execution-failed
      Targets:
        - TargetType: SNS
          TargetAddress: "arn:aws:sns:eu-central-1:612329472750:SC-612329472750-pp-twhpa36nmx2y6-PipelineNotificationSNSTopic-1JK28XQDYTB76"
