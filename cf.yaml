AWSTemplateFormatVersion: "2010-09-09"
Description: "CI/CD elements for automate K8 creation"

Parameters:
  S3BucketName:
    Type: String
    Default: "iaac-s3"
    Description: Put the name of S3

Resources:
  S3BUCKET:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Put the name of the bucket with IaaC
      Name: S3BUCKET
      Type: "String"
      Value: !Ref S3BucketName

  BUILDNAME:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Name of the CodeBuild
      Name: BUILDNAME
      Type: "String"
      Value: !Sub CodeBuild-${AWS::StackName}

  USER:
    Type: AWS::SSM::Parameter
    Properties:
      Description: User for Docker images
      Name: USER
      Type: "String"
      Value: techuser

  IMAGE:
    Type: AWS::SSM::Parameter
    Properties:
      Name: IMAGE
      Type: String
      Value: "kopsimage"
      Description: Image for docker build

  ECRURL:
    Type: AWS::SSM::Parameter
    Properties:
      Name: ECRURL
      Type: String
      Value: !Sub "${AWS::AccountId}.dkr.ecr.eu-central-1.amazonaws.com"
      Description: Url to the AWS/ECR repository

  ECR:
    Type: AWS::SSM::Parameter
    Properties:
      Name: ECR
      Type: String
      Value: "devopsrepo"
      Description: Name of the ECR repository

  DevopsVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: project
          Value: devops    

  ECRRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "devopsrepo"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:role/${ECSRole}
            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:PutImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"
  ECSRole:
    Type: AWS::IAM::Role
    Description: Creating service role in IAM for AWS ECR
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"

  CodeBuildSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub "${AWS::StackName}-codebuild"
      GroupDescription: Security group for the CICD Process
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "tcp"
          FromPort: "0"
          ToPort: "65535"
      VpcId: !Ref DevopsVPC

  CodeBuildPolicy:
    Type: AWS::IAM::Policy
    Description: Setting IAM policy for service role for CodeBuild
    Properties:
      PolicyName: !Join
        - "-"
        - - !Ref "AWS::StackName"
          - CodeBuildPolicy
      Roles:
        - !Ref "CodeBuildRole"
      PolicyDocument:
        Statement:
          - Action:
              - codebuild:UpdateProject
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:GetLogEvents
            Effect: Allow
            Resource: "*"
          - Action:
              - ssm:GetSecretValue
              - ssm:GetParameters
              - ssm:GetParameter
            Resource: "*"
            Effect: Allow
          - Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeDhcpOptions
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              - ec2:DescribeSubnets
              - ec2:DescribeSecurityGroups
              - ec2:DescribeSecurityGroupRules
              - ec2:DescribeAvailabilityZones
              - ec2:CreateSecurityGroup
              - ec2:DescribeVpcs
              - ec2:CreateNetworkInterfacePermission
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:CreateBucket
              - s3:DeleteBucket
              - s3:ListAllMyBuckets
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
              - s3:GetBucketAcl
              - s3:GetBucketLocation
            Effect: Allow
            Resource: "*"
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:PutImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
            Effect: Allow
            Resource: "*"
          - Action:
              - codebuild:StartBuild
              - codebuild:StopBuild
              - codebuild:RetryBuild
            Effect: Allow
            Resource: "*"
          - Action:
              - secretsmanager:*
            Effect: Allow
            Resource: "*"

  #execution role for codebuild
  CodeBuildRole:
    Description: Creating service role in IAM for AWS CodeBuild
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
      Path: /service-role/
      RoleName: !Join
        - "-"
        - - !Ref "AWS::StackName"
          - CodeBuild
    Type: AWS::IAM::Role

  BuildImage:
    DependsOn:
      - CodeBuildPolicy
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub BuildImage-${AWS::StackName}
      Description: Install kops, create s3 bucket and create kops k8 cluster
      ServiceRole:
        Fn::GetAtt:
          - CodeBuildRole
          - Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        PrivilegedMode: true
        Image: "aws/codebuild/standard:5.0"
        Type: LINUX_CONTAINER
      QueuedTimeoutInMinutes: 60
      Source:
        Type: GITHUB
        Location: https://github.com/posone/awsk8.git
        #!Sub "${S3BucketName}/drd-computational-chemistry/devops-cpg/devopscpg/drd-computational-chemistry_devops-cpg.zip"
        BuildSpec: build/buildspec.yaml
#      VpcConfig:
#        VpcId: !Ref DevopsVPC
#        SecurityGroupIds:
#         - !Ref CodeBuildSecurityGroup
#       Subnets:
#          - !Ref SubName
          #- !Sub "cov-network-${DevopsVPC}-${CodeBuildSubnetType}-subnet-c" sharedvpccpg-intranet-b
      Triggers:
        Webhook: false
  #execution role for codebuild CovqRun

  RemBuild:
    DependsOn:
      - CodeBuildPolicy
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub RemBuild-${AWS::StackName}
      Description: Remove s3 bucket and kops cluster
      ServiceRole:
        Fn::GetAtt:
          - CodeBuildRole
          - Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        PrivilegedMode: true
        Image: "aws/codebuild/standard:5.0"
        Type: LINUX_CONTAINER
      QueuedTimeoutInMinutes: 60
      Source:
        Type: GITHUB
        Location: https://github.com/posone/awsk8.git
        BuildSpec: build/rembuild.yaml
      Triggers:
        Webhook: false
